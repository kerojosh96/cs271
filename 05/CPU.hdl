// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    
    ARegister(in=MuxOut,load=intoTheARegLoad,out=RegOutA,out[0..14]=addressM); // done
    Or(a=instruction[5],b=NottedLastIn,out=intoTheARegLoad); // Done 
    PC(in=RegOutA,reset=reset,inc=true,out[0..14]=pc,load=Jump2); 

    Not(in=instruction[15],out=NottedLastIn);        // this lets InM go to the A reg if inM[15]=0
    Mux16(a=OutALU,b=instruction,sel=NottedLastIn,out=MuxOut); // mux on left of diagram 
    ALU(x=RegOutD,y=AMMuxOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=OutALU,zr=Zr, ng=Ng); // Done

    And(a=instruction[15],b=instruction[4],out=IntoD);
    DRegister(in=OutALU,load=IntoD,out=RegOutD);
    Mux16(a=RegOutA,b=inM,sel=instruction[12],out=AMMuxOut); // middle of the diagram

    Not(in=Ng,out=positiveNg);// If output is negative then 0 if output is positive then 1
    Not(in=Zr,out=NottedZr); // If output is zero then 0 if anything else then 1
    And(a=positiveNg,b=NottedZr,out=IsPositive);
    //jmp commands
     
    And(a=instruction[0],b=IsPositive,out=JGT);

    And(a=instruction[1],b=Zr,out=JEQ);

    And(a=instruction[2],b=Ng,out=JLT);

    Or8Way(in[0]=JGT,in[1]=JEQ,in[2]=JLT,out=Jump1);
    And(a=Jump1,b=instruction[15],out=Jump2);
    And(a=instruction[15],b=instruction[3],out=writeM);
    
}
